// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adds component to docgen collection 1`] = `
"import * as React from \\"react\\";

interface SimpleComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A simple component.
 */
export const SimpleComponent: React.SFC<SimpleComponentProps> = props => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
// @ts-ignore
  SimpleComponent.__docgenInfo = {
      description: \\"A simple component.\\",
      props: {\\"color\\":{\\"defaultValue\\":null,\\"description\\":\\"Button color.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/Simple.tsx\\",\\"name\\":\\"SimpleComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}}},
      displayName: \\"SimpleComponent\\"
  };
  // @ts-ignore
  if (typeof STORYBOOK_REACT_CLASSES !== \\"undefined\\") {
    // @ts-ignore
    STORYBOOK_REACT_CLASSES['Simple.tsx#SimpleComponent'] = SimpleComponent.__docgenInfo;
  }
  // @ts-ignore
  SimpleComponent.displayName = \\"SimpleComponent\\"
} catch {};"
`;

exports[`component fixture DefaultPropValue.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface DefaultPropValueComponentProps {
  /**
   * Button color.
   *
   * @default blue
   **/
  color: \\"blue\\" | \\"green\\";

  /**
   * Button counter.
   */
  counter: number;

  /**
   * Button disabled.
   */
  disabled: boolean;
}

/**
 * Component with a prop with a default value.
 */
export const DefaultPropValueComponent: React.SFC<
  DefaultPropValueComponentProps
> = props => (
  <button disabled={props.disabled} style={{ backgroundColor: props.color }}>
    {props.counter}
    {props.children}
  </button>
);

DefaultPropValueComponent.defaultProps = {
  counter: 123,
  disabled: false,
};

try {
// @ts-ignore
  DefaultPropValueComponent.__docgenInfo = {
      description: \\"Component with a prop with a default value.\\",
      props: {\\"color\\":{\\"defaultValue\\":{\\"value\\":\\"blue\\"},\\"description\\":\\"Button color.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/DefaultPropValue.tsx\\",\\"name\\":\\"DefaultPropValueComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}},\\"counter\\":{\\"defaultValue\\":{\\"value\\":123},\\"description\\":\\"Button counter.\\",\\"name\\":\\"counter\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/DefaultPropValue.tsx\\",\\"name\\":\\"DefaultPropValueComponentProps\\"},\\"required\\":false,\\"type\\":{\\"name\\":\\"number\\",\\"raw\\":\\"number\\"}},\\"disabled\\":{\\"defaultValue\\":{\\"value\\":false},\\"description\\":\\"Button disabled.\\",\\"name\\":\\"disabled\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/DefaultPropValue.tsx\\",\\"name\\":\\"DefaultPropValueComponentProps\\"},\\"required\\":false,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"boolean\\",\\"value\\":[{\\"value\\":\\"false\\",\\"raw\\":\\"false\\"},{\\"value\\":\\"true\\",\\"raw\\":\\"true\\"}]}}},
      displayName: \\"DefaultPropValueComponent\\"
  };
  
  // @ts-ignore
  DefaultPropValueComponent.displayName = \\"DefaultPropValueComponent\\"
} catch {};"
`;

exports[`component fixture HyphenatedPropName.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface HyphenatedPropNameProps {
  /** Button color. */
  \\"button-color\\": \\"blue\\" | \\"green\\";
}

/**
 * A component with a hyphenated prop name.
 */
export const HyphenatedPropNameComponent: React.SFC<
  HyphenatedPropNameProps
> = props => (
  <button style={{ backgroundColor: props[\\"button-color\\"] }}>
    {props.children}
  </button>
);

try {
// @ts-ignore
  HyphenatedPropNameComponent.__docgenInfo = {
      description: \\"A component with a hyphenated prop name.\\",
      props: {\\"button-color\\":{\\"defaultValue\\":null,\\"description\\":\\"Button color.\\",\\"name\\":\\"button-color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/HyphenatedPropName.tsx\\",\\"name\\":\\"HyphenatedPropNameProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}}},
      displayName: \\"HyphenatedPropNameComponent\\"
  };
  
  // @ts-ignore
  HyphenatedPropNameComponent.displayName = \\"HyphenatedPropNameComponent\\"
} catch {};"
`;

exports[`component fixture MultiProps.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultiPropsComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";

  /** Button size. */
  size: \\"small\\" | \\"large\\";
}

/**
 * This is a component with multiple props.
 */
export const MultiPropsComponent: React.SFC<
  MultiPropsComponentProps
> = props => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
// @ts-ignore
  MultiPropsComponent.__docgenInfo = {
      description: \\"This is a component with multiple props.\\",
      props: {\\"color\\":{\\"defaultValue\\":null,\\"description\\":\\"Button color.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/MultiProps.tsx\\",\\"name\\":\\"MultiPropsComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}},\\"size\\":{\\"defaultValue\\":null,\\"description\\":\\"Button size.\\",\\"name\\":\\"size\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/MultiProps.tsx\\",\\"name\\":\\"MultiPropsComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"small\\\\\\" | \\\\\\"large\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"small\\\\\\"\\",\\"raw\\":\\"\\\\\\"small\\\\\\"\\"},{\\"value\\":\\"\\\\\\"large\\\\\\"\\",\\"raw\\":\\"\\\\\\"large\\\\\\"\\"}]}}},
      displayName: \\"MultiPropsComponent\\"
  };
  
  // @ts-ignore
  MultiPropsComponent.displayName = \\"MultiPropsComponent\\"
} catch {};"
`;

exports[`component fixture MultilineDescription.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultilineDescriptionProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A component with a multiline description.
 *
 * Second line.
 */
export const MultilineDescriptionComponent: React.SFC<
  MultilineDescriptionProps
> = props => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
// @ts-ignore
  MultilineDescriptionComponent.__docgenInfo = {
      description: \\"A component with a multiline description.\\\\n\\\\nSecond line.\\",
      props: {\\"color\\":{\\"defaultValue\\":null,\\"description\\":\\"Button color.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/MultilineDescription.tsx\\",\\"name\\":\\"MultilineDescriptionProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}}},
      displayName: \\"MultilineDescriptionComponent\\"
  };
  
  // @ts-ignore
  MultilineDescriptionComponent.displayName = \\"MultilineDescriptionComponent\\"
} catch {};"
`;

exports[`component fixture MultilinePropDescription.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultilinePropDescriptionComponentProps {
  /**
   * This is a multiline prop description.
   *
   * Second line.
   */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A component with multiline prop description.
 */
export const MultilinePropDescriptionComponent: React.SFC<
  MultilinePropDescriptionComponentProps
> = props => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
// @ts-ignore
  MultilinePropDescriptionComponent.__docgenInfo = {
      description: \\"A component with multiline prop description.\\",
      props: {\\"color\\":{\\"defaultValue\\":null,\\"description\\":\\"This is a multiline prop description.\\\\n\\\\nSecond line.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/MultilinePropDescription.tsx\\",\\"name\\":\\"MultilinePropDescriptionComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}}},
      displayName: \\"MultilinePropDescriptionComponent\\"
  };
  
  // @ts-ignore
  MultilinePropDescriptionComponent.displayName = \\"MultilinePropDescriptionComponent\\"
} catch {};"
`;

exports[`component fixture Simple.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface SimpleComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A simple component.
 */
export const SimpleComponent: React.SFC<SimpleComponentProps> = props => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
// @ts-ignore
  SimpleComponent.__docgenInfo = {
      description: \\"A simple component.\\",
      props: {\\"color\\":{\\"defaultValue\\":null,\\"description\\":\\"Button color.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/Simple.tsx\\",\\"name\\":\\"SimpleComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}}},
      displayName: \\"SimpleComponent\\"
  };
  
  // @ts-ignore
  SimpleComponent.displayName = \\"SimpleComponent\\"
} catch {};"
`;

exports[`component fixture TextOnlyComponent.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

/**
 * A component with only text content wrapped in a div.
 *
 * Ref: https://github.com/strothj/react-docgen-typescript-loader/issues/7
 */
export const SimpleComponent: React.SFC<{}> = () => (
  <div>Test only component</div>
);

try {
// @ts-ignore
  SimpleComponent.__docgenInfo = {
      description: \\"A component with only text content wrapped in a div.\\\\n\\\\nRef: https://github.com/strothj/react-docgen-typescript-loader/issues/7\\",
      props: {},
      displayName: \\"SimpleComponent\\"
  };
  
  // @ts-ignore
  SimpleComponent.displayName = \\"SimpleComponent\\"
} catch {};"
`;

exports[`generates value info for enums 1`] = `
"import * as React from \\"react\\";

interface DefaultPropValueComponentProps {
  /**
   * Button color.
   *
   * @default blue
   **/
  color: \\"blue\\" | \\"green\\";

  /**
   * Button counter.
   */
  counter: number;

  /**
   * Button disabled.
   */
  disabled: boolean;
}

/**
 * Component with a prop with a default value.
 */
export const DefaultPropValueComponent: React.SFC<
  DefaultPropValueComponentProps
> = props => (
  <button disabled={props.disabled} style={{ backgroundColor: props.color }}>
    {props.counter}
    {props.children}
  </button>
);

DefaultPropValueComponent.defaultProps = {
  counter: 123,
  disabled: false,
};

try {
// @ts-ignore
  DefaultPropValueComponent.__docgenInfo = {
      description: \\"Component with a prop with a default value.\\",
      props: {\\"color\\":{\\"defaultValue\\":{\\"value\\":\\"blue\\"},\\"description\\":\\"Button color.\\",\\"name\\":\\"color\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/DefaultPropValue.tsx\\",\\"name\\":\\"DefaultPropValueComponentProps\\"},\\"required\\":true,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"\\\\\\"blue\\\\\\" | \\\\\\"green\\\\\\"\\",\\"value\\":[{\\"value\\":\\"\\\\\\"blue\\\\\\"\\",\\"raw\\":\\"\\\\\\"blue\\\\\\"\\"},{\\"value\\":\\"\\\\\\"green\\\\\\"\\",\\"raw\\":\\"\\\\\\"green\\\\\\"\\"}]}},\\"counter\\":{\\"defaultValue\\":{\\"value\\":123},\\"description\\":\\"Button counter.\\",\\"name\\":\\"counter\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/DefaultPropValue.tsx\\",\\"name\\":\\"DefaultPropValueComponentProps\\"},\\"required\\":false,\\"type\\":{\\"name\\":\\"number\\",\\"raw\\":\\"number\\"}},\\"disabled\\":{\\"defaultValue\\":{\\"value\\":false},\\"description\\":\\"Button disabled.\\",\\"name\\":\\"disabled\\",\\"parent\\":{\\"fileName\\":\\"react-docgen-typescript-loader/src/__fixtures__/components/DefaultPropValue.tsx\\",\\"name\\":\\"DefaultPropValueComponentProps\\"},\\"required\\":false,\\"type\\":{\\"name\\":\\"enum\\",\\"raw\\":\\"boolean\\",\\"value\\":[{\\"value\\":\\"false\\",\\"raw\\":\\"false\\"},{\\"value\\":\\"true\\",\\"raw\\":\\"true\\"}]}}},
      displayName: \\"DefaultPropValueComponent\\"
  };
  
  // @ts-ignore
  DefaultPropValueComponent.displayName = \\"DefaultPropValueComponent\\"
} catch {};"
`;
